using System;
using System.Collections.Generic;
using System.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using System.Threading.Tasks;
using Noggog;
using Mutagen.Bethesda.Plugins;

namespace SilverWeaponKeywords
{
	public class Program
    {
        public static Lazy<Settings> _settings = null!;
        public static Settings Settings => _settings.Value;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "SynSilverKeywords.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            // Silver weapons needing the keyword
            HashSet<FormKey> silverWeapons = new();

            // Silver ingots
            HashSet<FormKey> silvers = new()
            {
                Skyrim.MiscItem.ingotSilver.FormKey
            };

            // Treat Quicksilver as Silver
            if (Settings.QuicksilverIsSilver)
                silvers.Add(Skyrim.MiscItem.IngotQuicksilver.FormKey);

            // Counters
            int count1 = 0;
            int count2 = 0;

            System.Console.WriteLine("Starting Patching!");

            var linkCacheConnectedToLoadOrder = state.LoadOrder.ToImmutableLinkCache();

            // Iterate on Constructible objects (crafting, temper and breakdown)
            System.Console.WriteLine("Searching cnstructible objects for items made with silver...");
            foreach (var recipeGetter in state.LoadOrder.PriorityOrder.WinningOverrides<IConstructibleObjectGetter>())
            {
                // Ignore null
                if (recipeGetter.Items is null) continue;

                // Ignore items that are not weapons
                var weapon = recipeGetter.CreatedObject.TryResolve<IWeaponGetter>(linkCacheConnectedToLoadOrder);
                if (weapon is null)
                {
                    continue;
                }

                // If the weapon is already in the list, ignore it
                if (silverWeapons.Contains(weapon.FormKey)) continue;

                // For each item needed to craft
                foreach (var item in recipeGetter.Items)
                {
                    // If one is silver
                    if (silvers.Contains(item.Item.Item.FormKey))
                    {
                        if (Settings.Debug)
                            System.Console.WriteLine("silver weapon found: " + weapon.FormKey);

                        if (weapon.Keywords is null) continue;

                        // If the weapon does not have the keyword
                        if (!weapon.Keywords.Contains(Skyrim.Keyword.WeapMaterialSilver))
                        {
                            // Add the weapon to the list
                            silverWeapons.Add(weapon.FormKey);
                            continue;
                        }
                        else
                        {
                            if (Settings.Debug)
                                System.Console.WriteLine("Keyword already there, skipping!");
                        }
                    }
                }
            }

            // Iterate on all weapons
            System.Console.WriteLine("Searching weapons...");
            foreach (var weaponGetter in state.LoadOrder.PriorityOrder.WinningOverrides<IWeaponGetter>())
            {
                // If it is in the list of craftable silver weapons without the keyword, add it
                if (silverWeapons.Contains(weaponGetter.FormKey))
                {
                    // Add the keyword
                    if (weaponGetter.Keywords is not null && !weaponGetter.Keywords.Contains(Skyrim.Keyword.WeapMaterialSilver))
                    {
                        var weap = state.PatchMod.Weapons.GetOrAddAsOverride(weaponGetter);
                        weap.Keywords?.Add(Skyrim.Keyword.WeapMaterialSilver);

                        if (Settings.Debug)
                            System.Console.WriteLine("Keyword added to: " + weaponGetter.EditorID + " / " + weaponGetter.FormKey);

                        // Count
                        count1++;

                        continue;
                    }
                    else
                    {
                        if (Settings.Debug)
                            System.Console.WriteLine("Keyword already there, skipping!");
                    }
                }

                // Search by EditorID
                if (Settings.SearchByEditorID)
                {
                    // Ignore null EditorID
                    if (weaponGetter.EditorID is null) continue;

                    // Ignore bound weapons
                    if (weaponGetter.Data is not null && weaponGetter.Data.Flags.HasFlag(Mutagen.Bethesda.Skyrim.WeaponData.Flag.BoundWeapon)) continue;
                    if (weaponGetter.EditorID.Contains("boundweapon", StringComparison.OrdinalIgnoreCase)) continue;

                    // Check editorID
                    if (weaponGetter.EditorID.Contains("silver", StringComparison.OrdinalIgnoreCase))
                    {
                        // Add the keyword
                        if (weaponGetter.Keywords is not null && !weaponGetter.Keywords.Contains(Skyrim.Keyword.WeapMaterialSilver))
                        {
                            var weap = state.PatchMod.Weapons.GetOrAddAsOverride(weaponGetter);
                            weap.Keywords?.Add(Skyrim.Keyword.WeapMaterialSilver);

                            if (Settings.Debug)
                                System.Console.WriteLine("Keyword added to: " + weaponGetter.EditorID + " / " + weaponGetter.FormKey);

                            // Count
                            count2++;

                            continue;
                        }
                        else
                        {
                            if (Settings.Debug)
                                System.Console.WriteLine("Keyword already there, skipping!");
                        }
                    }
                }
            }

            System.Console.WriteLine("Added silver keyword to " + count1 + " weapons based on crafting recipes!");
            System.Console.WriteLine("Added silver keyword to " + count2 + " weapons by name!");

            System.Console.WriteLine("All done!");
        }
    }
}
